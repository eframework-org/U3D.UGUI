name: 单元测试

on:
  workflow_dispatch:
    inputs:
      unity_versions:
        description: 'Unity 版本：https://unity.com/releases/editor/archive'
        required: false
        type: string
        default: '["2021.3.30f1", "2022.3.60f1", "6000.1.2f1"]'
      test_modes:
        description: '测试模式：EditMode/PlayMode'
        required: false
        type: string
        default: '["EditMode", "PlayMode"]'
  workflow_call:
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
    inputs:
      unity_versions:
        description: 'Unity 版本：https://unity.com/releases/editor/archive'
        required: false
        type: string
        default: '["2021.3.30f1", "2022.3.60f1", "6000.1.2f1"]'
      test_modes:
        description: '测试模式：EditMode/PlayMode'
        required: false
        type: string
        default: '["EditMode", "PlayMode"]'
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}

permissions:
  checks: write
  contents: read
  actions: read
  security-events: write

jobs:
  test:
    name: 测试 Unity${{ matrix.unityVersion }}.${{ matrix.testMode }} 环境
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Package/Samples~
        unityVersion: ${{ fromJson(github.event.inputs.unity_versions || inputs.unity_versions) }}
        testMode: ${{ fromJson(github.event.inputs.test_modes || inputs.test_modes) }}
    outputs:
      passed: ${{ steps.tests.conclusion == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          lfs: true
          path: Package

      - name: 检出缓存
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ runner.os }}-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ runner.os }}-

      - name: 准备镜像
        run: |
          # 创建启动脚本
          cat > entrypoint.sh << 'EOF'
          #!/bin/bash
          # 同意 TexturePacker 许可协议
          yes agree | TexturePacker --version

          echo "TexturePacker: $(TexturePacker --version)"

          # 继续执行传入的命令
          exec "$@"
          EOF
          chmod +x entrypoint.sh

          # 创建 Dockerfile
          cat > Dockerfile << EOF
          FROM unityci/editor:ubuntu-${{ matrix.unityVersion }}-linux-il2cpp-3

          # 安装必要的依赖
          RUN apt-get update && apt-get install -y \
              wget \
              libegl1-mesa \
              libgl1-mesa-glx \
              libfontconfig \
              libx11-6 \
              libxkbcommon-x11-0 \
              libqt5core5a \
              libqt5gui5 \
              libqt5widgets5 \
              libqt5network5 \
              libgdiplus \
              && rm -rf /var/lib/apt/lists/*

          # 下载并安装 TexturePacker
          RUN wget https://www.codeandweb.com/download/texturepacker/7.6.0/TexturePacker-7.6.0.deb \
              && dpkg -i TexturePacker-7.6.0.deb || true \
              && rm TexturePacker-7.6.0.deb

          # 复制启动脚本
          COPY entrypoint.sh /usr/local/bin/
          RUN chmod +x /usr/local/bin/entrypoint.sh

          # 设置镜像入口
          ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
          EOF

          # 构建镜像
          docker build -t unity-editor-ubuntu-linux-il2cpp-3:${{ matrix.unityVersion }} .
          docker images | grep unity-editor-ubuntu-linux-il2cpp-3

      - name: 运行测试
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          TZ: 'Asia/Shanghai'
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: Results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: 测试 Unity${{ matrix.unityVersion }}.${{ matrix.testMode }} 报告
          customImage: unity-editor-ubuntu-linux-il2cpp-3:${{ matrix.unityVersion }}

      - name: 上传报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test#${{ github.run_number }}.Unity${{ matrix.unityVersion }}.${{ matrix.testMode }}.Reports
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 14